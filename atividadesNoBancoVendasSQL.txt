/* Exercício 1 */
UPDATE DEBITOS d
SET d.SITUACAO_DEBITO = 'Atrasado'
WHERE d.SITUACAO_DEBITO = 'Pendente' AND d.DATAVENCIMENTO < CURRENT_DATE 

/* Exercício 2 */
UPDATE DEBITOS d
SET d.SITUACAO_DEBITO = 'Pendente'
WHERE d.SITUACAO_DEBITO <> 'Pago' AND d.DATAVENCIMENTO >= CURRENT_DATE

/* Exercício 3 */
UPDATE DEBITOS d
SET d.DATAVENCIMENTO = DATEADD(5 YEAR TO d.DATAVENCIMENTO) 
WHERE d.SITUACAO_DEBITO = 'Negociado'

/* Exercício 4 */
SELECT p.NOME, p.EMAIL, p.TELEFONE FROM PESSOA p

/* Exercício 5 */
SELECT p.PRECO_UNITARIO FROM PRODUTO p 
WHERE p.PRECO_UNITARIO > 100

/* Exercício 6 */
SELECT * FROM VENDA v
WHERE v.DATA_VENDA = '2022-06-23'

/* Exercício 7 */
SELECT p.DATA_NASCIMENTO,
       p.NOME,
       2024 - EXTRACT(YEAR FROM p.DATA_NASCIMENTO) AS IDADE
FROM PESSOA p 
WHERE p.ID_PESSOA IN (
SELECT f.ID_PESSOA 
FROM FORNECEDOR f 
WHERE f.ID_FORNECEDOR NOT IN (
SELECT p2.ID_FORNECEDOR 
FROM PRODUTO p2
)
)

/* Exercício 8 */
/* Observação: estou vendo se possui compras realizadas e tem débito atrasado,
   não se fez compras enquanto tinha o débito atrasado
 */
SELECT * FROM CLIENTE c 
WHERE c.ID_CLIENTE IN (SELECT d.ID_CLIENTE FROM DEBITOS d WHERE d.DATAVENCIMENTO < CURRENT_DATE)
AND c.ID_Cliente IN (SELECT P.ID_CLIENTE FROM PAGAMENTO p)

/* o 9 foi pulado porque necessita de uma tabela que não foi criada */

/* Exercício 10 */
SELECT p.NOME
,p.ID_PESSOA
,2024 - EXTRACT(YEAR FROM p.DATA_NASCIMENTO) AS IDADE
,SUM(p2.VALOR_DEBITO) AS SOMA_DEBITOS
,SUM(p2.VALOR_PAGO) AS SOMA_PAGO
FROM PESSOA p
INNER JOIN CLIENTE c ON p.ID_PESSOA = c.ID_PESSOA
INNER JOIN PAGAMENTO p2 ON c.ID_CLIENTE = p2.ID_CLIENTE
WHERE p.ID_PESSOA IN (SELECT c.ID_PESSOA FROM CLIENTE c WHERE c.ID_CLIENTE IN (SELECT p2.ID_CLIENTE FROM PAGAMENTO p2))
GROUP BY p.NOME, p.ID_PESSOA, p.DATA_NASCIMENTO
ORDER BY SOMA_DEBITOS DESC
ROWS 1 TO 10

/* Exercício 11 */
UPDATE PRODUTO P
SET P.QUANTIDADE_ESTOQUE = QUANTIDADE_ESTOQUE*1.1
WHERE P.QUANTIDADE_ESTOQUE < 10

/* 12 também foi pulada */

/* Exercício 13 */
UPDATE DEBITOS D
SET D.SITUACAO_DEBITO = 'Pago'
WHERE D.SITUACAO_DEBITO = 'Atrasado' AND 
D.SITUACAO_DEBITO IN (SELECT P.ID_DEBITO FROM PAGAMENTO P)
/* Com erro de conversão de string */

/* Exercício 15 */
SELECT * FROM VENDA V
WHERE V.DATA_VENDA BETWEEN '2023-12-01' AND '2024-01-01'

/* Exercício 16 */
SELECT * FROM PRODUTO P
WHERE P.QUANTIDADE_ESTOQUE BETWEEN 5 AND 20

/* Exercício 17 */
SELECT * FROM PESSOA P
WHERE P.NOME LIKE 'A%'

/* Exercício 18 */
SELECT * FROM PRODUTO P
WHERE P.ID_PRODUTO IN (SELECT I.ID_PRODUTO FROM ITENSVENDA I
WHERE I.ID_VENDA IN (SELECT V.ID_VENDA FROM VENDA V))

/* Exercício 19 */
/* PRODUTO->ITENSVENDA->VENDA->PESSOA */
SELECT * FROM PRODUTO P
RIGHT JOIN ITENSVENDA I ON I.ID_PRODUTO = P.ID_PRODUTO
RIGHT JOIN VENDA V ON V.ID_VENDA = I.ID_VENDA
WHERE V.ID_PESSOA IN (SELECT P2.ID_PESSOA FROM PESSOA P2 WHERE P2.NOME = 'Carla Souza' OR P2.NOME = 'Larissa Ferreira')

/* Exercício 20 */
SELECT * FROM PESSOA P
WHERE P.ID_PESSOA IN (SELECT C.ID_PESSOA FROM CLIENTE C) OR P.ID_PESSOA IN (SELECT F.ID_PESSOA FROM FORNECEDOR F)

/* Exercício 21 */
SELECT V.VALOR_TOTAL
, V.DATA_VENDA
, F.DESCRICAO
, C.CPF AS CPF_COMPRADOR
, P.NOME
, P.TELEFONE
, P.EMAIL
FROM VENDA V
RIGHT JOIN FORMA_PAGAMENTO F ON F.ID_FORMA_PAGAMENTO = V.ID_FORMA_PAGAMENTO
RIGHT JOIN PESSOA P ON P.ID_PESSOA = V.ID_PESSOA
RIGHT JOIN CLIENTE C ON C.ID_PESSOA = P.ID_PESSOA

/* Exercício 22 */
/* VENDA->ITENSVENDA->PRODUTO */
SELECT V.DATA_VENDA AS DATA_COMPRA
, V.VALOR_TOTAL
, P.NOME
, P.DESCRICAO
, P.PRECO_UNITARIO
FROM VENDA V
RIGHT JOIN ITENSVENDA I ON I.ID_VENDA = V.ID_VENDA 
RIGHT JOIN PRODUTO P ON P.ID_PRODUTO = I.ID_PRODUTO
WHERE P.NOME = 'Placa de Captura'

/* Exercício 23 */
SELECT P.NOME
,2025 - EXTRACT(YEAR FROM DATEADD(YEAR, 1, P.DATA_NASCIMENTO)) AS IDADE_2025
FROM PESSOA P
WHERE P.ID_PESSOA IN (SELECT F.ID_PESSOA FROM FORNECEDOR F) OR P.ID_PESSOA IN (SELECT C.ID_PESSOA FROM CLIENTE C)

/* Exercício 24 */
/* se ID_PESSOA de ENDERECO for nulo quer dizer que não pertence a nenhuma pessoa */
SELECT L.NOME AS NOME_LOGRADOURO
, B.NOME AS NOME_BAIRRO
, B.CEP
, E.ID_PESSOA 
FROM LOGRADOURO L
RIGHT JOIN ENDERECO E ON E.ID_LOGRADOURO = L.ID_LOGRADOURO 
RIGHT JOIN BAIRRO B ON B.ID_BAIRRO = L.ID_BAIRRO

/* Exercício 25 */
SELECT * FROM PRODUTO P
WHERE P.PRECO_UNITARIO > (SELECT AVG(PRODUTO.PRECO_UNITARIO) FROM PRODUTO)

/* Exercício 26 */
/*Caminho feito: Pessoa->Endereco->Municipio */
SELECT *
FROM PESSOA P
WHERE P.ID_PESSOA IN (SELECT E.ID_PESSOA FROM ENDERECO E
WHERE E.ID_MUNICIPIO IN (SELECT M.ID_MUNICIPIO FROM MUNICIPIO M
WHERE M.POPULACAO > 1000000))

/* Exercício 27 */
/* Sobre o CASE: https://www.firebirdsql.org/file/documentation/reference_manuals/reference_material/html/langrefupd15-case.html */
/* Por meio do chatGPT, descobri que dá para usar "THEN 1" a fim de trazer um valor que pode ser contado,
   CASE funciona como if-else de outras linguagens de programação, só que pode ser usado dentro
   de uma consulta já direto. */
SELECT COUNT(CASE WHEN P.ID_PRODUTO IN (SELECT I.ID_PRODUTO FROM ITENSVENDA I) THEN 1 END) AS QUANTIDADE_PRODUTOS
,F.ID_FORNECEDOR
FROM FORNECEDOR F
LEFT JOIN PRODUTO P ON P.ID_FORNECEDOR = F.ID_FORNECEDOR
GROUP BY F.ID_FORNECEDOR

/* Exercício 28 */
SELECT P.NOME
,V.VALOR_TOTAL
FROM VENDA V
RIGHT JOIN PESSOA P ON P.ID_PESSOA = V.ID_PESSOA
WHERE V.VALOR_TOTAL > 500
